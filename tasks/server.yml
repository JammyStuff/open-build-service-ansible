# Copyright (c) 2020-2021, AT&T Intellectual Property.
#
# SPDX-License-Identifier: BSD-3-Clause
---
- name: Install Open Build Service pattern
  zypper:
    name: OBS_Server
    type: pattern
- name: Install Open Build Service Commander
  zypper:
    name: osc
    state: present
- name: Install OBS service tar_scm
  zypper:
      name: obs-service-tar_scm
      state: present
- name: Install OBS service download_url
  zypper:
      name: obs-service-download_url
      state: present
- name: Install OBS service recompress
  zypper:
      name: obs-service-recompress
      state: present
- name: Set up signer
  include_tasks: signer.yml
- name: Set permissions on run directory
  file:
    path: /srv/obs/run
    owner: obsrun
    group: obsrun
    mode: 0775
    state: directory
- name: Enable required backend services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop: "{{ obs_require_backend_services }}"
- name: Enable recommended backend services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop: "{{ obs_recommended_backend_services }}"
- name: Enable optional backend services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop: "{{ obs_optional_backend_services }}"
- name: Create repo directory
  file:
    path: /srv/obs/repos
    owner: obsrun
    group: obsrun
    state: directory
- name: Set up MySQL
  include_tasks: mysql.yml
- name: Populate core configuration scripts
  copy:
    src: "{{ item }}"
    dest: "/srv/www/obs/api/lib/tasks/{{ item }}"
  loop:
    - configuration.rake
    - configuration_global_notification.rake
    - admin_password.rake
    - distribution.rake
    - remote_instance.rake
- name: Create core configuration.xml
  template:
    src: configuration.xml.j2
    dest: /srv/www/obs/api/config/configuration.xml
    owner: root
    group: root
    mode: 0600
- name: Configure core configuration
  shell: "RAILS_ENV=production bin/rails load_configuration_xml[/srv/www/obs/api/config/configuration.xml]"
  args:
    chdir: /srv/www/obs/api
- name: Set ownership on API log directory
  file:
    path: /srv/www/obs/api/log
    owner: wwwrun
    group: www
    recurse: yes
    state: directory
- name: Create certs directory
  file:
    path: /srv/obs/certs
    mode: 0700
    state: directory
- name: Copy server key
  copy:
    src: "{{ obs_key_path }}"
    dest: "/srv/obs/certs/server.key"
    owner: root
    group: root
    mode: 0600
  when: obs_key_path | default(false)
  notify:
    - restart apache2
- name: Copy server certificate
  copy:
    src: "{{ obs_cert_path }}"
    dest: "/srv/obs/certs/server.crt"
    owner: root
    group: root
    mode: 0644
  when: obs_cert_path | default(false)
  notify:
    - restart apache2
- name: Generate server key
  command: openssl genrsa -out /srv/obs/certs/server.key 4096
  args:
    creates: /srv/obs/certs/server.key
  notify:
    - restart apache2
- name: Check if server certificate exists
  stat:
    path: /srv/obs/certs/server.crt
  register: obs_server_cert_stat
- name: Create openssl config file
  template:
    src: obs-selfsigned.cnf.j2
    dest: /tmp/obs-selfsigned.cnf
    owner: root
    group: root
    mode: 0600
  when: not obs_server_cert_stat.stat.exists
- name: Generate server certificate
  command: openssl req -new -nodes -config /tmp/obs-selfsigned.cnf -x509 -days 365 -batch -key /srv/obs/certs/server.key -out /srv/obs/certs/server.crt
  args:
    creates: /srv/obs/certs/server.crt
  notify:
    - restart apache2
- name: Copy server certificate to trust anchors
  command: cp /srv/obs/certs/server.crt /usr/share/pki/trust/anchors/obs-server.pem
  args:
    creates: /usr/share/pki/trust/anchors/obs-server.pem
  notify:
    - update ca certificates
- name: Set up apache2
  include_tasks: apache2.yml
- name: Enable OBS API support target
  service:
    name: obs-api-support.target
    enabled: yes
    state: started
- name: Patch xdelta
  include_tasks: xdelta.yml
  when: obs_xdelta1_compat
- name: Gather service facts
  service_facts:
- name: Configure firewall
  include_tasks: firewall.yml
  when: services['firewalld.service'] is defined and services['firewalld.service']['state'] == 'running'
